{"version":3,"sources":["data/getData.js","reducers/rootReducer.js","reducers/productReducer.js","actions/initializeState.js","components/graph/graphContainer.js","components/product/productContainer.js","components/table/tableContainer.js","App.js","registerServiceWorker.js","index.js","store.js"],"names":["getData","Data","combineReducers","product","state","action","type","payload","GraphContainer","React","memo","sales","data","useMemo","reduce","acc","sale","push","Date","weekEnding","retailSales","wholesaleSales","className","chartType","width","height","options","chart","title","legend","position","ProductContainer","image","subtitle","tags","tagsJSX","map","tag","key","src","alt","columns","name","selector","sortable","right","TableContainer","pagination","App","this","props","initializeState","isLoaded","Object","keys","length","brand","icon","faHome","href","faBars","Component","connect","dispatch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5289f7f0.chunk.js","sourcesContent":["// This file is to just mimick Ajax call\n\nimport Data from \"./stub\";\nconst getData = () => Data[0];\nexport default getData;\n","import { combineReducers } from \"redux\";\nimport productReducer from \"./productReducer\";\n\nexport default combineReducers({\n  product: productReducer\n});\n","import { INTIALIZE_STATE } from \"../actions/initializeState\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case INTIALIZE_STATE:\n      return {\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import getData from \"../data/getData\";\n\nexport const INTIALIZE_STATE = \"INTIALIZE_STATE\";\n\nexport const initializeState = () => dispatch => {\n  dispatch({\n    type: INTIALIZE_STATE,\n    payload: getData()\n  });\n};\n","import React, { useMemo } from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport \"./graph.css\";\n\nexport const GraphContainer = React.memo(({ sales }) => {\n  const data = useMemo(\n    () => sales.reduce(\n      (acc, sale) => {\n        acc.push([\n          new Date(sale.weekEnding),\n          sale.retailSales,\n          sale.wholesaleSales\n        ]);\n        return acc;\n      },\n      [[{ type: \"date\" }, { type: \"number\" }, { type: \"number\" }]]\n    ),\n    [sales]\n  );\n\n  return (\n    <div className=\"graph-container\">\n      <Chart\n        chartType=\"Line\"\n        data={data}\n        width=\"calc(100% - 10px)\"\n        height=\"400px\"\n        options={{\n          chart: {\n            title: \"Retail Sales\",\n            legend: {position: 'none'}\n          }\n        }}\n      />\n    </div>\n  );\n});\n","import React from \"react\";\nimport \"./product.css\";\n\nexport const ProductContainer = React.memo(\n  ({ title, image, subtitle, tags }) => {\n    const tagsJSX =\n      tags &&\n      tags.map(tag => (\n        <span key={tag} className=\"product-tag\">\n          {tag}\n        </span>\n      ));\n    return (\n      <div className=\"product-container\">\n        <img src={image} alt={title} className=\"product-img\" />\n        <p className=\"product-title\">{title}</p>\n        <p className=\"product-subtitle\">{subtitle}</p>\n        <div className=\"product-tags\">{tagsJSX}</div>\n      </div>\n    );\n  }\n);\n","import React from \"react\";\nimport DataTable from \"react-data-table-component\";\nimport \"./table.css\";\n\nconst columns = [\n  {\n    name: \"Week Ending\",\n    selector: \"weekEnding\",\n    sortable: true\n  },\n  {\n    name: \"Retail Sales\",\n    selector: \"retailSales\",\n    sortable: true,\n    right: true\n  },\n  {\n    name: \"Wholesale Sales\",\n    selector: \"wholesaleSales\",\n    sortable: true,\n    right: true\n  },\n  {\n    name: \"Units Sold\",\n    selector: \"unitsSold\",\n    sortable: true,\n    right: true\n  },\n  {\n    name: \"Retailer Margin\",\n    selector: \"retailerMargin\",\n    sortable: true,\n    right: true\n  }\n];\n\nexport const TableContainer = React.memo(({ sales }) => (\n  <div className=\"table-container\">\n    <DataTable title=\"\" columns={columns} data={sales} pagination={true} />\n  </div>\n));\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome, faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { initializeState } from \"./actions/initializeState\";\nimport \"./App.css\";\nimport { GraphContainer, ProductContainer, TableContainer } from \"./components\";\n\n/*\n * mapDispatchToProps\n */\nconst mapDispatchToProps = dispatch => ({\n  initializeState: () => dispatch(initializeState())\n});\n\n/*\n * mapStateToProps\n */\nconst mapStateToProps = state => ({\n  product: state.product\n});\n\n/**\n * @class App\n * @extends {Component}\n */\nclass App extends Component {\n  componentDidMount() {\n    this.props.initializeState();\n  }\n\n  //   title: \"Shark Ninja\"\n  // image: \"https://images-na.ssl-images-amazon.com/images/I/51h-a5IaHeL.jpg\"\n  // subtitle: \"Magic Bullet NutriBullet 12-Piece High-Speed Blender/Mixer System\"\n  // brand: \"Nutribullet\"\n\n  render() {\n    const { product } = this.props;\n    const isLoaded = Object.keys(product).length !== 0;\n    const { title, image, subtitle, brand, tags, sales } = product;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <span>Stackline Tushar's Assignment</span>\n        </header>\n        <main>\n          {isLoaded ? (\n            <>\n              <section className=\"App-side\">\n                <ProductContainer\n                  title={title}\n                  image={image}\n                  subtitle={subtitle}\n                  brand={brand}\n                  tags={tags}\n                />\n                <ul className=\"App-links\">\n                  <li>\n                    <FontAwesomeIcon icon={faHome} />\n                    <a href=\"#\">Overview</a>\n                  </li>\n                  <li className=\"active\">\n                    <FontAwesomeIcon icon={faBars} />\n                    <a href=\"#\"> Sales</a>\n                  </li>\n                </ul>\n              </section>\n              <section className=\"App-main\">\n                <GraphContainer sales={sales} />\n                <TableContainer sales={sales} />\n              </section>\n            </>\n          ) : null}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Required for Redux store setup\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n","import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nexport default function configureStore() {\n  return createStore(rootReducer, applyMiddleware(thunk));\n}\n"],"sourceRoot":""}